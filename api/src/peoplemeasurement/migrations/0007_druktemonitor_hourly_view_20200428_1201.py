# Generated by Django 2.2.10 on 2020-04-28 10:01

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('peoplemeasurement', '0006_cmsa_15min_view_v2_20200423_1200'),
    ]
    _VIEW_NAME = "druktemonitor_hourly_view"

    sql = f"""
        CREATE VIEW {_VIEW_NAME} AS
        with Raw as(
            select
                sensor,
                timestamp,
                coalesce(sum((detail_elems ->> 'count')::integer) FILTER (WHERE detail_elems ->> 'direction' = 'down'), 0) as count_down,
                coalesce(sum((detail_elems ->> 'count')::integer) FILTER (WHERE detail_elems ->> 'direction' = 'up'), 0) as count_up
            FROM
                peoplemeasurement_peoplemeasurement,
                jsonb_array_elements(details) detail_elems
            WHERE
                date_trunc('hour', timestamp) = date_trunc('hour', now() - interval '1 hours')
            group by
                sensor,
                timestamp
            order by
                sensor,
                timestamp
        ),

        T1 as (
            select distinct
                sensor,
                date_trunc('hour', timestamp) + date_part('minute', timestamp)::int / 15 * interval '15 min' as timestamp_rounded
            from
                raw
        ),

        Downs as(
            select
                sensor,
                date_trunc('hour', timestamp) + date_part('minute', timestamp)::int / 15 * interval '15 min' as timestamp_rounded,
                avg(count_down) as count_down
            from
                raw
            where
                count_down != 0
            group by
                sensor,
                timestamp_rounded
            order by
                sensor,
                timestamp_rounded
        ),

        Ups as(
            select
                sensor,
                date_trunc('hour', timestamp) + date_part('minute', timestamp)::int / 15 * interval '15 min' as timestamp_rounded,
                avg(count_up) as count_up
            from
                raw
            where
                count_up != 0
            group by
                sensor,
                timestamp_rounded
            order by
                sensor,
                timestamp_rounded
        ),

        QuarterHourTable as(
            select
                t1.*, downs.count_down, ups.count_up, downs.count_down + ups.count_up as count_both_directions
            from
                T1
            left join
                downs
            on
                t1.timestamp_rounded = downs.timestamp_rounded
            and
                t1.sensor = downs.sensor
            left join
                ups
            on
                t1.timestamp_rounded = ups.timestamp_rounded
            and
                t1.sensor= ups.sensor
        )

        select
            sensor,  cast(timestamp_rounded as date) as datum, extract(hour from timestamp_rounded)::int as hh, avg(count_both_directions) as count_both_directions, date_trunc('hour', max(timestamp_rounded)) as timestamp
        from
            QuarterHourTable
        group by
            sensor, datum, hh
        order by
            datum, hh, sensor;
    """

    reverse_sql = f"drop view if exists {_VIEW_NAME};"


    operations = [
        migrations.RunSQL(
            sql=sql,
            reverse_sql=reverse_sql
        ),
    ]
