# Generated by Django 3.0.11 on 2020-11-11 09:50

import contrib.timescale.fields
from django.db import migrations
import django.utils.timezone

TABLES = [
    'telcameras_v2_observation',
    'telcameras_v2_countaggregate',
    'telcameras_v2_personaggregate',
]

class Migration(migrations.Migration):

    dependencies = [
        ('telcameras_v2', '0012_cmsa_15min_view_v6_realtime_20200917_1300'),
    ]

    # First add the time fields in the original tables
    operations = [
        migrations.AddField(
            model_name='observation',
            name='time',
            field=contrib.timescale.fields.TimescaleDateTimeField(default=django.utils.timezone.now, interval='1 day'),
        ),
        migrations.AddField(
            model_name='countaggregate',
            name='time',
            field=contrib.timescale.fields.TimescaleDateTimeField(default=django.utils.timezone.now, interval='1 day'),
        ),
        migrations.AddField(
            model_name='personaggregate',
            name='time',
            field=contrib.timescale.fields.TimescaleDateTimeField(default=django.utils.timezone.now, interval='1 day'),
        ),
    ]

    # Overwrite those fields with the value from observation.timestamp_start
    operations.append(
        migrations.RunSQL(
            sql=f"UPDATE telcameras_v2_observation SET time = timestamp_start;"
        )
    )
    operations.append(
        migrations.RunSQL(
            sql=f"UPDATE telcameras_v2_countaggregate count_agg SET time = ob.time FROM telcameras_v2_observation ob WHERE ob.id = count_agg.observation_id;"
        )
    )
    operations.append(
        migrations.RunSQL(
            sql=f"UPDATE telcameras_v2_personaggregate person_agg SET time = ob.time FROM telcameras_v2_observation ob WHERE ob.id = person_agg.observation_id;"
        )
    )

    for table in TABLES:
        print("##### TABLE ", table)
        # Create new tables
        operations.append(
            migrations.RunSQL(
                sql=f"CREATE TABLE {table}_hypertable (LIKE {table} INCLUDING DEFAULTS INCLUDING CONSTRAINTS INCLUDING INDEXES);",
                reverse_sql=f"DROP TABLE {table}_hypertable;"
            )
        )

        # Drop pkey constrains that prevents hypertable creation
        operations.append(
            migrations.RunSQL(
                sql=f"ALTER TABLE {table}_hypertable DROP CONSTRAINT {table}_hypertable_pkey;"
            )
        )

        # Convert the new tables to hypertables
        operations.append(
            migrations.RunSQL(
                sql=f"SELECT create_hypertable('{table}_hypertable', 'time', chunk_time_interval => INTERVAL '1 day');"
            )
        )

        # Rename old table to something else
        # These old tables will be removed in a future migration
        operations.append(
            migrations.RunSQL(
                sql=f"ALTER TABLE {table} RENAME TO {table}_old;"
            )
        )

        # Rename hypertable to correct name
        operations.append(
            migrations.RunSQL(
                sql=f"ALTER TABLE {table}_hypertable RENAME TO {table};"
            )
        )
